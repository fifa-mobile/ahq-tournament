{"version":3,"sources":["loader.js","App.js","serviceWorker.js","index.js"],"names":["window","$","jQuery","require","App","ajax","url","success","data","brackets","teams","results","type","count","content","teamCount","console","log","i","push","half","indexStart","indexHalf","bracket","teamWidth","init","error","e","id","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oJAAAA,OAAOC,EAAID,OAAOE,OAASC,EAAQ,I,8IC+EpBC,G,8MAtEXH,KAAE,WACAA,IAAEI,KAAK,CACLC,IAAK,oCACLC,QAAS,SAAAC,GACP,IAAIC,EAAW,CACbC,MAAQ,GACRC,QAAU,IAEZ,GAAkB,aAAdH,EAAKI,KAAqB,CAG5B,IAFA,IAAMC,EAAQL,EAAKM,QAAQD,MACvBE,EAAY,EACTA,EAAYF,EAAOE,GAAW,EACnCC,QAAQC,IAAIF,EAAWF,GAEzBG,QAAQC,IAAI,UAAWF,GACvB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAWG,GAAG,EAChCT,EAASC,MAAMS,KAAK,IAKtB,IAHA,IAAIC,EAAOL,EAAY,EACnBM,EAAa,EACbC,EAAYF,EACPF,EAAI,EAAGA,EAAIE,EAAMF,IACxBT,EAASC,MAAMQ,GAAGC,KAAK,CAAC,SAAD,OAAUE,EAAW,KAC5CZ,EAASC,MAAMQ,GAAGC,KAAK,CAAC,SAAD,OAAUG,EAAU,KAC3CD,IACAC,SAEG,GAAkB,WAAdd,EAAKI,KAAmB,CAIjC,IAHA,IAAMC,EAAQL,EAAKM,QAAQD,MACrBH,EAAQF,EAAKM,QAAQJ,MACvBK,EAAY,EACTA,EAAYF,EAAOE,GAAW,EACnCC,QAAQC,IAAIF,EAAWF,GAEzBG,QAAQC,IAAI,UAAWF,GACvB,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAWG,GAAG,EAChCT,EAASC,MAAMS,KAAK,IAKtB,IAHA,IAAIC,EAAOL,EAAY,EACnBM,EAAa,EACbC,EAAYF,EACPF,EAAI,EAAGA,EAAIE,EAAMF,IACxBT,EAASC,MAAMQ,GAAGC,KAAKT,EAAMW,IACxBX,EAAMY,KACTZ,EAAMY,GAAa,MAErBb,EAASC,MAAMQ,GAAGC,KAAKT,EAAMY,IAC7BD,IACAC,IAGJrB,IAAE,YAAYsB,QAAQ,CACpBC,UAAW,IACXC,KAAMhB,KAGViB,MAAO,SAAAC,GACLX,QAAQC,IAAI,QAASU,W,+BAO3B,OACE,yBAAKC,GAAG,gB,GAnEIC,IAAMC,YCKJC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d9c56e53.chunk.js","sourcesContent":["window.$ = window.jQuery = require('jquery');\n","import React from 'react';\nimport './App.css';\nimport $ from 'jquery';\nimport './loader.js';\nimport 'jquery-bracket/dist/jquery.bracket.min.css';\nimport 'jquery-bracket/dist/jquery.bracket.min.js';\n\nclass App extends React.Component {\n  componentDidMount() {\n    $(function() {\n      $.ajax({\n        url: \"https://yuulye.herokuapp.com/data\",\n        success: data => {\n          let brackets = {\n            teams : [],\n            results : []\n          };\n          if (data.type === 'unlocked') {\n            const count = data.content.count;\n            let teamCount = 1;\n            for (; teamCount < count; teamCount*=2) {\n              console.log(teamCount, count);\n            }\n            console.log('round# ', teamCount);\n            for (let i = 0; i < teamCount; i+=2) {\n              brackets.teams.push([]);\n            }\n            let half = teamCount / 2;\n            let indexStart = 0;\n            let indexHalf = half;\n            for (let i = 0; i < half; i++) {\n              brackets.teams[i].push([`Spot #${indexStart+1}`]);\n              brackets.teams[i].push([`Spot #${indexHalf+1}`]);\n              indexStart++;\n              indexHalf++;\n            }\n          } else if (data.type === 'locked') {\n            const count = data.content.count;\n            const teams = data.content.teams;\n            let teamCount = 1;\n            for (; teamCount < count; teamCount*=2) {\n              console.log(teamCount, count);\n            }\n            console.log('round# ', teamCount);\n            for (let i = 0; i < teamCount; i+=2) {\n              brackets.teams.push([]);\n            }\n            let half = teamCount / 2;\n            let indexStart = 0;\n            let indexHalf = half;\n            for (let i = 0; i < half; i++) {\n              brackets.teams[i].push(teams[indexStart]);\n              if (!teams[indexHalf]) {\n                teams[indexHalf] = null;\n              } \n              brackets.teams[i].push(teams[indexHalf]);\n              indexStart++;\n              indexHalf++;\n            }\n          }\n          $('#bracket').bracket({\n            teamWidth: 128,\n            init: brackets,\n          });\n        },\n        error: e => {\n          console.log('error', e);\n        },\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"bracket\"/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}